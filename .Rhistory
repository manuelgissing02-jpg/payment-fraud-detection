# Project Setup
#aktivieren der Packages für Daten einlesen und bereinigen
#Bitte nicht vergessen die packages unter Tools vorab zu installieren !
library(readr)
library(dplyr)
library(tidyr)
library(skimr)
datensatz <- read.csv("C:/Github/payment-fraud-detection/Data/fraud_dataset_fhj25.csv")
head((datensatz))
skim(datensatz)
# Project Setup
#aktivieren der Packages für Daten einlesen und bereinigen
#Bitte nicht vergessen die packages unter Tools vorab zu installieren !
library(readr)
library(dplyr)
library(tidyr)
library(skimr)
datensatz <- read.csv("C:/Github/payment-fraud-detection/Data/fraud_dataset_fhj25.csv")
head((datensatz))
skim(datensatz)
# Project Setup
#aktivieren der Packages für Daten einlesen und bereinigen
#Bitte nicht vergessen die packages unter Tools vorab zu installieren !
library(readr)
library(dplyr)
library(tidyr)
library(skimr)
datensatz <- read.csv("C:/Github/payment-fraud-detection/Data/fraud_dataset_fhj25.csv")
head((datensatz))
skim(datensatz)
View(datensatz)
View(datensatz)
duplicated(datensatz)
any(duplicated(datensatz))
colnames(datensatz) <- c("date", "age", "profession","region", "account_balance", "num_debit","num_credit","num_pos","num_mov_conto","incoming payments","outgoing payments","product number","num_fraud")
View(datensatz)
View(datensatz)
View(datensatz)
View(datensatz)
df_sorted <- datensatz %>%
arrange(desc("incoming payments"), desc("outgoing payments"))
View(df_sorted)
View(df_sorted)
df_sorted <- datensatz %>%
arrange(desc("incoming payments"), desc("outgoing payments"))
View(df_sorted)
df_sorted <- datensatz %>%
arrange(desc("incoming payments"))
View(df_sorted)
df_sorted <- datensatz %>%
arrange(desc(`incoming payments`))
View(df_sorted)
datensatz <- datensatz %>%
filter(!(num_debit == 0 &
num_credit == 0 &
num_pos == 0 &
num_fraud == 0))
View(datensatz)
df_sorted <- datensatz %>%
arrange(desc(`incoming payments`))
# Project Setup
#aktivieren der Packages für Daten einlesen und bereinigen
#Bitte nicht vergessen die packages unter Tools vorab zu installieren !
library(readr)
library(dplyr)
library(tidyr)
library(skimr)
# Project Setup
#aktivieren der Packages für Daten einlesen und bereinigen
# 👇 Vorbereitung: Falls Pakete noch nicht installiert sind, werden sie automatisch installiert
packages <- c("readr", "dplyr", "tidyr", "skimr","ggplot2")
for (p in packages) {
if (!require(p, character.only = TRUE)) {
install.packages(p)
library(p, character.only = TRUE)
}
}
datensatz <- read.csv("C:/Github/payment-fraud-detection/Data/fraud_dataset_fhj25.csv")
# Project Setup
#aktivieren der Packages für Daten einlesen und bereinigen
# 👇 Vorbereitung: Falls Pakete noch nicht installiert sind, werden sie automatisch installiert
packages <- c("readr", "dplyr", "tidyr", "skimr","ggplot2")
for (p in packages) {
if (!require(p, character.only = TRUE)) {
install.packages(p)
library(p, character.only = TRUE)
}
}
datensatz <- read.csv("Data/fraud_dataset_fhj25.csv")
head((datensatz))
skim(datensatz)
##check ob gleiche Datensätze vorhanden sind
any(duplicated(datensatz))
##Spalten unbenennen
colnames(datensatz) <- c("date", "age", "profession","region", "account_balance", "num_debit","num_credit","num_pos","num_mov_conto","incoming payments","outgoing payments","product number","num_fraud")
##2627 zeilen wurden gelöscht, schaupsi wann gehma bier trinken?
datensatz <- datensatz %>%
filter(!(num_debit == 0 &
num_credit == 0 &
num_pos == 0 &
num_fraud == 0))
##Fokussierung u. sortieren der incoming payment spalte
##Große Transaktionen sind wichtig
df_sorted <- datensatz %>%
arrange(desc(`incoming payments`))
summary(df_sorted)
# Project Setup
#aktivieren der Packages für Daten einlesen und bereinigen
# 👇 Vorbereitung: Falls Pakete noch nicht installiert sind, werden sie automatisch installiert
packages <- c("readr", "dplyr", "tidyr", "skimr","ggplot2")
for (p in packages) {
if (!require(p, character.only = TRUE)) {
install.packages(p)
library(p, character.only = TRUE)
}
}
datensatz <- read.csv("Data/fraud_dataset_fhj25.csv")
head((datensatz))
skim(datensatz)
##check ob gleiche Datensätze vorhanden sind
any(duplicated(datensatz))
##Spalten unbenennen
colnames(datensatz) <- c("date", "age", "profession","region", "account_balance", "num_debit","num_credit","num_pos","num_mov_conto","incoming payments","outgoing payments","product number","num_fraud")
##2627 zeilen wurden gelöscht, schaupsi wann gehma bier trinken?
datensatz <- datensatz %>%
filter(!(num_debit == 0 &
num_credit == 0 &
num_pos == 0 &
num_fraud == 0))
##Fokussierung u. sortieren der incoming payment spalte
##Große Transaktionen sind wichtig
df_sorted <- datensatz %>%
arrange(desc(`incoming payments`))
summary(df_sorted)
##########################################
# 📊 Explorative Analyse – Zentrale Risikofaktoren
##########################################
# Falls Pakete fehlen, automatisch installieren
packages <- c("dplyr", "ggplot2", "lubridate", "scales")
for (p in packages) {
if (!require(p, character.only = TRUE)) {
install.packages(p)
library(p, character.only = TRUE)
}
}
# 1️⃣ Datumsfelder in sinnvolle Zeitinformationen umwandeln
df_eda <- df_sorted %>%
mutate(
date = as.POSIXct(date, format = "%Y-%m-%d %H:%M:%S"),
weekday = wday(date, label = TRUE, abbr = TRUE),  # Montag–Sonntag
hour = hour(date)                                 # Stunde des Tages (0–23)
)
# 2️⃣ Anteil der Fraud-Fälle
table(df_eda$num_fraud)
prop.table(table(df_eda$num_fraud))
# 3️⃣ Fraud-Anteil nach Wochentag (Zeitfenster)
ggplot(df_eda, aes(x = weekday, fill = as.factor(num_fraud))) +
geom_bar(position = "fill") +
scale_fill_manual(values = c("steelblue", "red"), name = "Fraud") +
labs(title = "📅 Fraud-Anteil nach Wochentag",
x = "Wochentag", y = "Anteil an Transaktionen (%)") +
theme_minimal()
# 4️⃣ Fraud-Anteil nach Tageszeit
ggplot(df_eda, aes(x = hour, fill = as.factor(num_fraud))) +
geom_bar(position = "fill") +
scale_fill_manual(values = c("steelblue", "red"), name = "Fraud") +
labs(title = "⏰ Fraud-Anteil nach Tageszeit (0–23 Uhr)",
x = "Stunde", y = "Anteil an Transaktionen (%)") +
theme_minimal()
# 5️⃣ Account Balance vs. Fraud (Verteilung)
ggplot(df_eda, aes(x = account_balance, fill = as.factor(num_fraud))) +
geom_density(alpha = 0.4) +
scale_x_continuous(labels = scales::comma) +
scale_fill_manual(values = c("steelblue", "red"), name = "Fraud") +
labs(title = "💰 Kontostand (account_balance) und Fraud",
x = "Kontostand", y = "Dichte") +
theme_minimal()
# 6️⃣ Aktivität: num_mov_conto (Recency-Proxy)
ggplot(df_eda, aes(x = num_mov_conto, fill = as.factor(num_fraud))) +
geom_histogram(bins = 30, alpha = 0.6, position = "identity") +
scale_fill_manual(values = c("steelblue", "red"), name = "Fraud") +
labs(title = "📆 Aktivität (num_mov_conto) und Fraud",
x = "Kontobewegungen", y = "Anzahl Transaktionen") +
theme_minimal()
# 7️⃣ Fraud-Anteil nach Produktnummer (z. B. Kartentyp)
ggplot(df_eda, aes(x = as.factor(product.number), fill = as.factor(num_fraud))) +
geom_bar(position = "fill") +
scale_fill_manual(values = c("steelblue", "red"), name = "Fraud") +
labs(title = "🧾 Fraud-Anteil nach Produktnummer",
x = "Produktnummer", y = "Anteil Fraud") +
theme_minimal()
View(df_eda)
# Project Setup
#aktivieren der Packages für Daten einlesen und bereinigen
# 👇 Vorbereitung: Falls Pakete noch nicht installiert sind, werden sie automatisch installiert
packages <- c("readr", "dplyr", "tidyr", "skimr","ggplot2")
for (p in packages) {
if (!require(p, character.only = TRUE)) {
install.packages(p)
library(p, character.only = TRUE)
}
}
datensatz <- read.csv("Data/fraud_dataset_fhj25.csv")
head((datensatz))
skim(datensatz)
##check ob gleiche Datensätze vorhanden sind
any(duplicated(datensatz))
##Spalten unbenennen
colnames(datensatz) <- c("date", "age", "profession","region", "account_balance", "num_debit","num_credit","num_pos","num_mov_conto","incoming payments","outgoing payments","product number","num_fraud")
##2627 zeilen wurden gelöscht, schaupsi wann gehma bier trinken?
datensatz <- datensatz %>%
filter(!(num_debit == 0 &
num_credit == 0 &
num_pos == 0 &
num_fraud == 0))
##Fokussierung u. sortieren der incoming payment spalte
##Große Transaktionen sind wichtig
df_sorted <- datensatz %>%
arrange(desc(`incoming payments`))
summary(df_sorted)
##########################################
# 📊 Explorative Analyse – Zentrale Risikofaktoren
##########################################
# Falls Pakete fehlen, automatisch installieren
packages <- c("dplyr", "ggplot2", "lubridate", "scales")
for (p in packages) {
if (!require(p, character.only = TRUE)) {
install.packages(p)
library(p, character.only = TRUE)
}
}
# 1️⃣ Datumsfelder in sinnvolle Zeitinformationen umwandeln
df_eda <- df_sorted %>%
mutate(
date = as.POSIXct(date, format = "%Y-%m-%d %H:%M:%S"),
weekday = wday(date, label = TRUE, abbr = TRUE),  # Montag–Sonntag
hour = hour(date)                                 # Stunde des Tages (0–23)
)
# 2️⃣ Anteil der Fraud-Fälle
table(df_eda$num_fraud)
prop.table(table(df_eda$num_fraud))
# 3️⃣ Fraud-Anteil nach Wochentag (Zeitfenster)
ggplot(df_eda, aes(x = weekday, fill = as.factor(num_fraud))) +
geom_bar(position = "fill") +
scale_fill_manual(values = c("steelblue", "red"), name = "Fraud") +
labs(title = "📅 Fraud-Anteil nach Wochentag",
x = "Wochentag", y = "Anteil an Transaktionen (%)") +
theme_minimal()
# 4️⃣ Fraud-Anteil nach Tageszeit
ggplot(df_eda, aes(x = hour, fill = as.factor(num_fraud))) +
geom_bar(position = "fill") +
scale_fill_manual(values = c("steelblue", "red"), name = "Fraud") +
labs(title = "⏰ Fraud-Anteil nach Tageszeit (0–23 Uhr)",
x = "Stunde", y = "Anteil an Transaktionen (%)") +
theme_minimal()
# 5️⃣ Account Balance vs. Fraud (Verteilung)
ggplot(df_eda, aes(x = account_balance, fill = as.factor(num_fraud))) +
geom_density(alpha = 0.4) +
scale_x_continuous(labels = scales::comma) +
scale_fill_manual(values = c("steelblue", "red"), name = "Fraud") +
labs(title = "💰 Kontostand (account_balance) und Fraud",
x = "Kontostand", y = "Dichte") +
theme_minimal()
# 6️⃣ Aktivität: num_mov_conto (Recency-Proxy)
ggplot(df_eda, aes(x = num_mov_conto, fill = as.factor(num_fraud))) +
geom_histogram(bins = 30, alpha = 0.6, position = "identity") +
scale_fill_manual(values = c("steelblue", "red"), name = "Fraud") +
labs(title = "📆 Aktivität (num_mov_conto) und Fraud",
x = "Kontobewegungen", y = "Anzahl Transaktionen") +
theme_minimal()
# 7️⃣ Fraud-Anteil nach Produktnummer (z. B. Kartentyp)
ggplot(df_eda, aes(x = as.factor(product number), fill = as.factor(num_fraud))) +
# Project Setup
#aktivieren der Packages für Daten einlesen und bereinigen
# 👇 Vorbereitung: Falls Pakete noch nicht installiert sind, werden sie automatisch installiert
packages <- c("readr", "dplyr", "tidyr", "skimr","ggplot2")
for (p in packages) {
if (!require(p, character.only = TRUE)) {
install.packages(p)
library(p, character.only = TRUE)
}
}
datensatz <- read.csv("Data/fraud_dataset_fhj25.csv")
head((datensatz))
skim(datensatz)
##check ob gleiche Datensätze vorhanden sind
any(duplicated(datensatz))
##Spalten unbenennen
colnames(datensatz) <- c("date", "age", "profession","region", "account_balance", "num_debit","num_credit","num_pos","num_mov_conto","incoming_payments","outgoing_payments","product_number","num_fraud")
##2627 zeilen wurden gelöscht, schaupsi wann gehma bier trinken?
datensatz <- datensatz %>%
filter(!(num_debit == 0 &
num_credit == 0 &
num_pos == 0 &
num_fraud == 0))
##Fokussierung u. sortieren der incoming payment spalte
##Große Transaktionen sind wichtig
df_sorted <- datensatz %>%
arrange(desc(`incoming payments`))
# Project Setup
#aktivieren der Packages für Daten einlesen und bereinigen
# 👇 Vorbereitung: Falls Pakete noch nicht installiert sind, werden sie automatisch installiert
packages <- c("readr", "dplyr", "tidyr", "skimr","ggplot2")
for (p in packages) {
if (!require(p, character.only = TRUE)) {
install.packages(p)
library(p, character.only = TRUE)
}
}
datensatz <- read.csv("Data/fraud_dataset_fhj25.csv")
head((datensatz))
skim(datensatz)
##check ob gleiche Datensätze vorhanden sind
any(duplicated(datensatz))
##Spalten unbenennen
colnames(datensatz) <- c("date", "age", "profession","region", "account_balance", "num_debit","num_credit","num_pos","num_mov_conto","incoming_payments","outgoing_payments","product_number","num_fraud")
##2627 zeilen wurden gelöscht, schaupsi wann gehma bier trinken?
datensatz <- datensatz %>%
filter(!(num_debit == 0 &
num_credit == 0 &
num_pos == 0 &
num_fraud == 0))
##Fokussierung u. sortieren der incoming payment spalte
##Große Transaktionen sind wichtig
df_sorted <- datensatz %>%
arrange(desc(`incoming_payments`))
summary(df_sorted)
##########################################
# 📊 Explorative Analyse – Zentrale Risikofaktoren
##########################################
# Falls Pakete fehlen, automatisch installieren
packages <- c("dplyr", "ggplot2", "lubridate", "scales")
for (p in packages) {
if (!require(p, character.only = TRUE)) {
install.packages(p)
library(p, character.only = TRUE)
}
}
# 1️⃣ Datumsfelder in sinnvolle Zeitinformationen umwandeln
df_eda <- df_sorted %>%
mutate(
date = as.POSIXct(date, format = "%Y-%m-%d %H:%M:%S"),
weekday = wday(date, label = TRUE, abbr = TRUE),  # Montag–Sonntag
hour = hour(date)                                 # Stunde des Tages (0–23)
)
# 2️⃣ Anteil der Fraud-Fälle
table(df_eda$num_fraud)
prop.table(table(df_eda$num_fraud))
# 3️⃣ Fraud-Anteil nach Wochentag (Zeitfenster)
ggplot(df_eda, aes(x = weekday, fill = as.factor(num_fraud))) +
geom_bar(position = "fill") +
scale_fill_manual(values = c("steelblue", "red"), name = "Fraud") +
labs(title = "📅 Fraud-Anteil nach Wochentag",
x = "Wochentag", y = "Anteil an Transaktionen (%)") +
theme_minimal()
# 4️⃣ Fraud-Anteil nach Tageszeit
ggplot(df_eda, aes(x = hour, fill = as.factor(num_fraud))) +
geom_bar(position = "fill") +
scale_fill_manual(values = c("steelblue", "red"), name = "Fraud") +
labs(title = "⏰ Fraud-Anteil nach Tageszeit (0–23 Uhr)",
x = "Stunde", y = "Anteil an Transaktionen (%)") +
theme_minimal()
# 5️⃣ Account Balance vs. Fraud (Verteilung)
ggplot(df_eda, aes(x = account_balance, fill = as.factor(num_fraud))) +
geom_density(alpha = 0.4) +
scale_x_continuous(labels = scales::comma) +
scale_fill_manual(values = c("steelblue", "red"), name = "Fraud") +
labs(title = "💰 Kontostand (account_balance) und Fraud",
x = "Kontostand", y = "Dichte") +
theme_minimal()
# 6️⃣ Aktivität: num_mov_conto (Recency-Proxy)
ggplot(df_eda, aes(x = num_mov_conto, fill = as.factor(num_fraud))) +
geom_histogram(bins = 30, alpha = 0.6, position = "identity") +
scale_fill_manual(values = c("steelblue", "red"), name = "Fraud") +
labs(title = "📆 Aktivität (num_mov_conto) und Fraud",
x = "Kontobewegungen", y = "Anzahl Transaktionen") +
theme_minimal()
# 7️⃣ Fraud-Anteil nach Produktnummer (z. B. Kartentyp)
ggplot(df_eda, aes(x = as.factor(product_number), fill = as.factor(num_fraud))) +
geom_bar(position = "fill") +
scale_fill_manual(values = c("steelblue", "red"), name = "Fraud") +
labs(title = "🧾 Fraud-Anteil nach Produktnummer",
x = "Produktnummer", y = "Anteil Fraud") +
theme_minimal()
View(df_sorted)
# Project Setup
#aktivieren der Packages für Daten einlesen und bereinigen
# 👇 Vorbereitung: Falls Pakete noch nicht installiert sind, werden sie automatisch installiert
packages <- c("readr", "dplyr", "tidyr", "skimr","ggplot2")
for (p in packages) {
if (!require(p, character.only = TRUE)) {
install.packages(p)
library(p, character.only = TRUE)
}
}
datensatz <- read.csv("Data/fraud_dataset_fhj25.csv")
head((datensatz))
skim(datensatz)
##check ob gleiche Datensätze vorhanden sind
any(duplicated(datensatz))
##Spalten unbenennen
colnames(datensatz) <- c("date", "age", "profession","region", "account_balance", "num_debit","num_credit","num_pos","num_mov_conto","incoming_payments","outgoing_payments","product_number","num_fraud")
##2627 zeilen wurden gelöscht, schaupsi wann gehma bier trinken?
datensatz <- datensatz %>%
filter(!(num_debit == 0 &
num_credit == 0 &
num_pos == 0 &
num_fraud == 0))
##Fokussierung u. sortieren der incoming payment spalte
##Große Transaktionen sind wichtig
df_sorted <- datensatz %>%
arrange(desc(`incoming_payments`))
summary(df_sorted)
# Datum umwandeln
df_eda <- df_sorted %>%
mutate(
date = as.Date(date, format = "%Y-%m-%d"),  # richtiges Datum
weekday = wday(date, label = TRUE, abbr = TRUE),  # Montag–Sonntag
month = month(date, label = TRUE, abbr = TRUE)    # Monatsname
)
# Anteil Fraud vs. Nicht-Fraud
table(df_eda$num_fraud)
prop.table(table(df_eda$num_fraud))
# 📅 Fraud-Anteil nach Wochentag
ggplot(df_eda, aes(x = weekday, fill = as.factor(num_fraud))) +
geom_bar(position = "fill") +
scale_fill_manual(values = c("steelblue", "red"), name = "Fraud") +
labs(title = "Fraud-Anteil nach Wochentag", x = "Wochentag", y = "Anteil (%)") +
theme_minimal()
# 🗓️ Fraud-Anteil nach Monat
ggplot(df_eda, aes(x = month, fill = as.factor(num_fraud))) +
geom_bar(position = "fill") +
scale_fill_manual(values = c("steelblue", "red"), name = "Fraud") +
labs(title = "Fraud-Anteil nach Monat", x = "Monat", y = "Anteil (%)") +
theme_minimal()
# 💰 Fraud vs. Kontostand
ggplot(df_eda, aes(x = account_balance, fill = as.factor(num_fraud))) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = c("steelblue", "red"), name = "Fraud") +
labs(title = "Kontostand und Fraud", x = "Kontostand", y = "Dichte") +
theme_minimal()
# 📆 Fraud vs. Kontobewegungen (Aktivität)
ggplot(df_eda, aes(x = num_mov_conto, fill = as.factor(num_fraud))) +
geom_histogram(bins = 30, alpha = 0.6, position = "identity") +
scale_fill_manual(values = c("steelblue", "red"), name = "Fraud") +
labs(title = "Kontobewegungen und Fraud", x = "Kontobewegungen", y = "Anzahl") +
theme_minimal()
